package com.javaee.basis.notes.firststage;

/**
 * 继承：
 *      就是子类继承父类的属性和行为，使得子类对象具有与父类相同的属性、相同的行为。子类可以直接 访问父类中的非私有的属性和行为
 * 好处:
 *      1. 提高代码的复用性。
 *      2. 类与类之间产生了关系，是多态的前提。
 *
 *  子父类中出现了同名的成员变量时，在子类中需要访问父类中非私有成员变量时，需要使用 super 关键字，修饰 父类成员变量，
 *  类似于之前学过的 this
 *
 *  方法重写 ：子类中出现与父类一模一样的方法时（返回值类型，方法名和参数列表都相同），会出现覆盖效 果，
 *  也称为重写或者复写。声明不变，重新实现。
 *
 *
 * 继承关系中，父子类构造方法的访问特点：
 *
 * 1. 子类构造方法当中有一个默认隐含的“super()”调用，所以一定是先调用的父类构造，后执行的子类构造。
 * 2. 子类构造可以通过super关键字来调用父类重载构造。
 * 3. super的父类构造调用，必须是子类构造方法的第一个语句。不能一个子类构造调用多次super构造。
 * 总结：
 * 子类必须调用父类构造方法，不写则赠送super()；写了则用写的指定的super调用，super只能有一个，还必须是第一个。
 *
 */
public class ExxtendsAndAbstractNote07 {

    /**
     * 抽象方法：就是加上abstract关键字，然后去掉大括号，直接分号结束。
     * 抽象类：抽象方法所在的类，必须是抽象类才行。在class之前写上abstract即可。
     *
     * 如何使用抽象类和抽象方法：
     * 1. 不能直接创建new抽象类对象。
     * 2. 必须用一个子类来继承抽象父类。
     * 3. 子类必须覆盖重写抽象父类当中所有的抽象方法。
     * 覆盖重写（实现）：子类去掉抽象方法的abstract关键字，然后补上方法体大括号。
     */
    public void abstractdemo(){

    }

    //多态
    /**
     * 代码当中体现多态性，其实就是一句话：父类引用指向子类对象。
     *
     * 格式：
     * 父类名称 对象名 = new 子类名称();
     * 或者：
     * 接口名称 对象名 = new 实现类名称();
     */

    //向下转型
    /**
     * 如何才能知道一个父类引用的对象，本来是什么子类？
     * 格式：
     * 对象 instanceof 类名称
     * 这将会得到一个boolean值结果，也就是判断前面的对象能不能当做后面类型的实例。
     */


    //泛型<E>
    /*
    泛型的上限：
    - 格式： 类型名称 <? extends 类 > 对象名称
    - 意义： 只能接收该类型及其子类

    泛型的下限：
    - 格式： 类型名称 <? super 类 > 对象名称
    - 意义： 只能接收该类型及其父类型
    */


}
